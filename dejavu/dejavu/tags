!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AudioSegment	.\decoder.py	/^from pydub import AudioSegment$/;"	i
AudioSegment	.\testing.py	/^from pydub import AudioSegment$/;"	i
BaseRecognizer	.\recognize.py	/^class BaseRecognizer(object):$/;"	c	inherits:object
CONFIDENCE	.\__init__.py	/^    CONFIDENCE = 'confidence'$/;"	v	class:Dejavu
Cursor	.\database_sql.py	/^class Cursor(object):$/;"	c	inherits:object
DEFAULT_AMP_MIN	.\fingerprint.py	/^DEFAULT_AMP_MIN = 10$/;"	v
DEFAULT_FAN_VALUE	.\fingerprint.py	/^DEFAULT_FAN_VALUE = 15 $/;"	v
DEFAULT_FS	.\fingerprint.py	/^DEFAULT_FS = 44100 $/;"	v
DEFAULT_OVERLAP_RATIO	.\fingerprint.py	/^DEFAULT_OVERLAP_RATIO = 0.5  $/;"	v
DEFAULT_WINDOW_SIZE	.\fingerprint.py	/^DEFAULT_WINDOW_SIZE = 4096$/;"	v
DROP_FINGERPRINTS	.\database_sql.py	/^    DROP_FINGERPRINTS = "DROP TABLE IF EXISTS %s;" % FINGERPRINTS_TABLENAME$/;"	v	class:SQLDatabase
DROP_SONGS	.\database_sql.py	/^    DROP_SONGS = "DROP TABLE IF EXISTS %s;" % SONGS_TABLENAME$/;"	v	class:SQLDatabase
Database	.\database.py	/^class Database(object):$/;"	c	inherits:object
Database	.\database_sql.py	/^from dejavu.database import Database$/;"	i
Dejavu	.\__init__.py	/^class Dejavu(object):$/;"	c	inherits:object
Dejavu	.\testing.py	/^from dejavu import Dejavu$/;"	i
DejavuTest	.\testing.py	/^class DejavuTest(object):$/;"	c	inherits:object
DictCursor	.\database_sql.py	/^from MySQLdb.cursors import DictCursor$/;"	i
FIELD_FINGERPRINTED	.\database_sql.py	/^    FIELD_FINGERPRINTED = "fingerprinted"$/;"	v	class:SQLDatabase
FIELD_HASH	.\database_sql.py	/^    FIELD_HASH = "hash"$/;"	v	class:SQLDatabase
FIELD_OFFSET	.\database_sql.py	/^    FIELD_OFFSET = "offset"$/;"	v	class:SQLDatabase
FIELD_SONGNAME	.\database_sql.py	/^    FIELD_SONGNAME = "song_name"$/;"	v	class:SQLDatabase
FIELD_SONG_ID	.\database_sql.py	/^    FIELD_SONG_ID = "song_id"$/;"	v	class:SQLDatabase
FINGERPRINTS_TABLENAME	.\database_sql.py	/^    FINGERPRINTS_TABLENAME = "fingerprints"$/;"	v	class:SQLDatabase
FINGERPRINT_REDUCTION	.\fingerprint.py	/^FINGERPRINT_REDUCTION = 20$/;"	v
FileRecognizer	.\recognize.py	/^class FileRecognizer(BaseRecognizer):$/;"	c	inherits:BaseRecognizer
IDX_FREQ_I	.\fingerprint.py	/^IDX_FREQ_I = 0$/;"	v
IDX_TIME_J	.\fingerprint.py	/^IDX_TIME_J = 1$/;"	v
INSERT_SONG	.\database_sql.py	/^    INSERT_SONG = "INSERT INTO %s (%s) values (%%s);" % ($/;"	v	class:SQLDatabase
MATCH_TIME	.\__init__.py	/^    MATCH_TIME = 'match_time'$/;"	v	class:Dejavu
MAX_HASH_TIME_DELTA	.\fingerprint.py	/^MAX_HASH_TIME_DELTA = 200$/;"	v
MIN_HASH_TIME_DELTA	.\fingerprint.py	/^MIN_HASH_TIME_DELTA = 0$/;"	v
MicrophoneRecognizer	.\recognize.py	/^class MicrophoneRecognizer(BaseRecognizer):$/;"	c	inherits:BaseRecognizer
NoRecordingError	.\recognize.py	/^class NoRecordingError(Exception):$/;"	c	inherits:Exception
OFFSET	.\__init__.py	/^    OFFSET = 'offset'$/;"	v	class:Dejavu
PEAK_NEIGHBORHOOD_SIZE	.\fingerprint.py	/^PEAK_NEIGHBORHOOD_SIZE = 20$/;"	v
PEAK_SORT	.\fingerprint.py	/^PEAK_SORT = True$/;"	v
Queue	.\database_sql.py	/^import Queue$/;"	i
SONGS_TABLENAME	.\database_sql.py	/^    SONGS_TABLENAME = "songs"$/;"	v	class:SQLDatabase
SONG_ID	.\__init__.py	/^    SONG_ID = "song_id"$/;"	v	class:Dejavu
SONG_NAME	.\__init__.py	/^    SONG_NAME = 'song_name'$/;"	v	class:Dejavu
SQLDatabase	.\database_sql.py	/^class SQLDatabase(Database):$/;"	c	inherits:Database
__enter__	.\database_sql.py	/^    def __enter__(self):$/;"	m	class:Cursor	file:	access:private
__exit__	.\database_sql.py	/^    def __exit__(self, extype, exvalue, traceback):$/;"	m	class:Cursor	file:	access:private
__getstate__	.\database_sql.py	/^    def __getstate__(self):$/;"	m	class:SQLDatabase	file:	access:private
__init__	.\__init__.py	/^    def __init__(self, config):$/;"	m	class:Dejavu	access:public
__init__	.\database.py	/^    def __init__(self):$/;"	m	class:Database	access:public
__init__	.\database_sql.py	/^    def __init__(self, **options):$/;"	m	class:SQLDatabase	access:public
__init__	.\database_sql.py	/^    def __init__(self, cursor_type=mysql.cursors.Cursor, **options):$/;"	m	class:Cursor	access:public
__init__	.\recognize.py	/^    def __init__(self, dejavu):$/;"	m	class:BaseRecognizer	access:public
__init__	.\recognize.py	/^    def __init__(self, dejavu):$/;"	m	class:FileRecognizer	access:public
__init__	.\recognize.py	/^    def __init__(self, dejavu):$/;"	m	class:MicrophoneRecognizer	access:public
__init__	.\testing.py	/^    def __init__(self, folder, seconds):$/;"	m	class:DejavuTest	access:public
__metaclass__	.\database.py	/^    __metaclass__ = abc.ABCMeta$/;"	v	class:Database
__setstate__	.\database_sql.py	/^    def __setstate__(self, state):$/;"	m	class:SQLDatabase	file:	access:private
_cache	.\database_sql.py	/^    _cache = Queue.Queue(maxsize=5)$/;"	v	class:Cursor
_fingerprint_worker	.\__init__.py	/^def _fingerprint_worker(filename, limit=None, song_name=None):$/;"	f	access:public
_recognize	.\recognize.py	/^    def _recognize(self, *data):$/;"	m	class:BaseRecognizer	access:public
abc	.\database.py	/^import abc$/;"	i
absolute_import	.\database.py	/^from __future__ import absolute_import$/;"	i
absolute_import	.\database_sql.py	/^from __future__ import absolute_import$/;"	i
after_fork	.\database.py	/^    def after_fork(self):$/;"	m	class:Database	access:public
after_fork	.\database_sql.py	/^    def after_fork(self):$/;"	m	class:SQLDatabase	access:public
align_matches	.\__init__.py	/^    def align_matches(self, matches):$/;"	m	class:Dejavu	access:public
ast	.\testing.py	/^import os, re, ast$/;"	i
autolabel	.\testing.py	/^def autolabel(rects, ax):$/;"	f	access:public
autolabeldoubles	.\testing.py	/^def autolabeldoubles(rects, ax):$/;"	f	access:public
before_fork	.\database.py	/^    def before_fork(self):$/;"	m	class:Database	access:public
begin	.\testing.py	/^    def begin(self):$/;"	m	class:DejavuTest	access:public
chunkify	.\__init__.py	/^def chunkify(lst, n):$/;"	f	access:public
clear_cache	.\database_sql.py	/^    def clear_cache(cls):$/;"	m	class:Cursor	access:public
create_plots	.\testing.py	/^    def create_plots(self, name, results, results_folder):$/;"	m	class:DejavuTest	access:public
cursor	.\database_sql.py	/^    def cursor(**options):$/;"	f	function:cursor_factory	access:public
cursor_factory	.\database_sql.py	/^def cursor_factory(**factory_options):$/;"	f	access:public
database_sql	.\database.py	/^import dejavu.database_sql$/;"	i
decoder	.\__init__.py	/^import dejavu.decoder as decoder$/;"	i
decoder	.\recognize.py	/^import dejavu.decoder as decoder$/;"	i
default_channels	.\recognize.py	/^    default_channels    = 2$/;"	v	class:MicrophoneRecognizer
default_chunksize	.\recognize.py	/^    default_chunksize   = 8192$/;"	v	class:MicrophoneRecognizer
default_format	.\recognize.py	/^    default_format      = pyaudio.paInt16$/;"	v	class:MicrophoneRecognizer
default_samplerate	.\recognize.py	/^    default_samplerate  = 44100$/;"	v	class:MicrophoneRecognizer
dejavu	.\__init__.py	/^import dejavu.decoder as decoder$/;"	i
dejavu	.\database.py	/^import dejavu.database_sql$/;"	i
dejavu	.\recognize.py	/^import dejavu.decoder as decoder$/;"	i
dejavu	.\recognize.py	/^import dejavu.fingerprint as fingerprint$/;"	i
delete_unfingerprinted_songs	.\database.py	/^    def delete_unfingerprinted_songs(self):$/;"	m	class:Database	access:public
delete_unfingerprinted_songs	.\database_sql.py	/^    def delete_unfingerprinted_songs(self):$/;"	m	class:SQLDatabase	access:public
division	.\testing.py	/^from __future__ import division$/;"	i
does	.\recognize.py	/^        pass  # base class does nothing$/;"	c	function:BaseRecognizer.recognize	inherits:
empty	.\database.py	/^    def empty(self):$/;"	m	class:Database	access:public
empty	.\database_sql.py	/^    def empty(self):$/;"	m	class:SQLDatabase	access:public
find_files	.\decoder.py	/^def find_files(path, extensions):$/;"	f	access:public
find_matches	.\__init__.py	/^    def find_matches(self, samples, Fs=fingerprint.DEFAULT_FS):$/;"	m	class:Dejavu	access:public
fingerprint	.\__init__.py	/^import fingerprint$/;"	i
fingerprint	.\fingerprint.py	/^def fingerprint(channel_samples, Fs=DEFAULT_FS,$/;"	f	access:public
fingerprint	.\recognize.py	/^import dejavu.fingerprint as fingerprint$/;"	i
fingerprint_directory	.\__init__.py	/^    def fingerprint_directory(self, path, extensions, nprocesses=None):$/;"	m	class:Dejavu	access:public
fingerprint_file	.\__init__.py	/^    def fingerprint_file(self, filepath, song_name=None):$/;"	m	class:Dejavu	access:public
fnmatch	.\decoder.py	/^import fnmatch$/;"	i
fnmatch	.\testing.py	/^import fnmatch$/;"	i
generate_binary_structure	.\fingerprint.py	/^from scipy.ndimage.morphology import (generate_binary_structure,$/;"	i
generate_hashes	.\fingerprint.py	/^def generate_hashes(peaks, fan_value=DEFAULT_FAN_VALUE):$/;"	f	access:public
generate_test_files	.\testing.py	/^def generate_test_files(src, dest, nseconds, fmts=[".mp3", ".wav"], padding=10):$/;"	f	access:public
get_2D_peaks	.\fingerprint.py	/^def get_2D_peaks(arr2D, plot=False, amp_min=DEFAULT_AMP_MIN):$/;"	f	access:public
get_column_id	.\testing.py	/^    def get_column_id (self, secs):$/;"	m	class:DejavuTest	access:public
get_database	.\__init__.py	/^from dejavu.database import get_database$/;"	i
get_database	.\database.py	/^def get_database(database_type=None):$/;"	f	access:public
get_files_recursive	.\testing.py	/^def get_files_recursive(src, fmt):$/;"	f	access:public
get_fingerprinted_songs	.\__init__.py	/^    def get_fingerprinted_songs(self):$/;"	m	class:Dejavu	access:public
get_iterable_kv_pairs	.\database.py	/^    def get_iterable_kv_pairs(self):$/;"	m	class:Database	access:public
get_iterable_kv_pairs	.\database_sql.py	/^    def get_iterable_kv_pairs(self):$/;"	m	class:SQLDatabase	access:public
get_length_audio	.\testing.py	/^def get_length_audio(audiopath, extension):$/;"	f	access:public
get_line_id	.\testing.py	/^    def get_line_id (self, song):$/;"	m	class:DejavuTest	access:public
get_num_fingerprints	.\database.py	/^    def get_num_fingerprints(self):$/;"	m	class:Database	access:public
get_num_fingerprints	.\database_sql.py	/^    def get_num_fingerprints(self):$/;"	m	class:SQLDatabase	access:public
get_num_songs	.\database.py	/^    def get_num_songs(self):$/;"	m	class:Database	access:public
get_num_songs	.\database_sql.py	/^    def get_num_songs(self):$/;"	m	class:SQLDatabase	access:public
get_recorded_time	.\recognize.py	/^    def get_recorded_time(self):$/;"	m	class:MicrophoneRecognizer	access:public
get_song_by_id	.\database.py	/^    def get_song_by_id(self, sid):$/;"	m	class:Database	access:public
get_song_by_id	.\database_sql.py	/^    def get_song_by_id(self, sid):$/;"	m	class:SQLDatabase	access:public
get_songs	.\database.py	/^    def get_songs(self):$/;"	m	class:Database	access:public
get_songs	.\database_sql.py	/^    def get_songs(self):$/;"	m	class:SQLDatabase	access:public
get_starttime	.\testing.py	/^def get_starttime(length, nseconds, padding):$/;"	f	access:public
grouper	.\database_sql.py	/^def grouper(iterable, n, fillvalue=None):$/;"	f	access:public
hashlib	.\fingerprint.py	/^import hashlib$/;"	i
insert	.\database.py	/^    def insert(self, hash, sid, offset):$/;"	m	class:Database	access:public
insert	.\database_sql.py	/^    def insert(self, hash, sid, offset):$/;"	m	class:SQLDatabase	access:public
insert_hashes	.\database.py	/^    def insert_hashes(self, sid, hashes):$/;"	m	class:Database	access:public
insert_hashes	.\database_sql.py	/^    def insert_hashes(self, sid, hashes):$/;"	m	class:SQLDatabase	access:public
insert_song	.\database.py	/^    def insert_song(self, song_name):$/;"	m	class:Database	access:public
insert_song	.\database_sql.py	/^    def insert_song(self, songname):$/;"	m	class:SQLDatabase	access:public
itemgetter	.\fingerprint.py	/^from operator import itemgetter$/;"	i
izip_longest	.\database_sql.py	/^from itertools import izip_longest$/;"	i
log_msg	.\testing.py	/^def log_msg(msg, log=True, silent=False):$/;"	f	access:public
logging	.\testing.py	/^import logging$/;"	i
matplotlib	.\fingerprint.py	/^import matplotlib.mlab as mlab$/;"	i
matplotlib	.\fingerprint.py	/^import matplotlib.pyplot as plt$/;"	i
maximum_filter	.\fingerprint.py	/^from scipy.ndimage.filters import maximum_filter$/;"	i
mlab	.\fingerprint.py	/^import matplotlib.mlab as mlab$/;"	i
multiprocessing	.\__init__.py	/^import multiprocessing$/;"	i
mysql	.\database_sql.py	/^import MySQLdb as mysql$/;"	i
np	.\decoder.py	/^import numpy as np$/;"	i
np	.\fingerprint.py	/^import numpy as np$/;"	i
np	.\recognize.py	/^import numpy as np$/;"	i
os	.\__init__.py	/^import os$/;"	i
os	.\decoder.py	/^import os$/;"	i
os	.\testing.py	/^import os, re, ast$/;"	i
path_to_songname	.\decoder.py	/^def path_to_songname(path):$/;"	f	access:public
path_to_songname	.\testing.py	/^from dejavu.decoder import path_to_songname$/;"	i
plt	.\fingerprint.py	/^import matplotlib.pyplot as plt$/;"	i
process_recording	.\recognize.py	/^    def process_recording(self):$/;"	m	class:MicrophoneRecognizer	access:public
pyaudio	.\recognize.py	/^import pyaudio$/;"	i
query	.\database.py	/^    def query(self, hash):$/;"	m	class:Database	access:public
query	.\database_sql.py	/^    def query(self, hash):$/;"	m	class:SQLDatabase	access:public
random	.\testing.py	/^import random$/;"	i
re	.\testing.py	/^import os, re, ast$/;"	i
read	.\decoder.py	/^def read(filename, limit=None):$/;"	f	access:public
recognize	.\__init__.py	/^    def recognize(self, recognizer, *options, **kwoptions):$/;"	m	class:Dejavu	access:public
recognize	.\recognize.py	/^    def recognize(self):$/;"	m	class:BaseRecognizer	access:public
recognize	.\recognize.py	/^    def recognize(self, filename):$/;"	m	class:FileRecognizer	access:public
recognize	.\recognize.py	/^    def recognize(self, seconds=10):$/;"	m	class:MicrophoneRecognizer	access:public
recognize_file	.\recognize.py	/^    def recognize_file(self, filename):$/;"	m	class:FileRecognizer	access:public
recognize_recording	.\recognize.py	/^    def recognize_recording(self):$/;"	m	class:MicrophoneRecognizer	access:public
return_matches	.\database.py	/^    def return_matches(self, hashes):$/;"	m	class:Database	access:public
return_matches	.\database_sql.py	/^    def return_matches(self, hashes):$/;"	m	class:SQLDatabase	access:public
set_seed	.\testing.py	/^def set_seed(seed=None):$/;"	f	access:public
set_song_fingerprinted	.\database.py	/^    def set_song_fingerprinted(self, sid):$/;"	m	class:Database	access:public
set_song_fingerprinted	.\database_sql.py	/^    def set_song_fingerprinted(self, sid):$/;"	m	class:SQLDatabase	access:public
setup	.\database.py	/^    def setup(self):$/;"	m	class:Database	access:public
setup	.\database_sql.py	/^    def setup(self):$/;"	m	class:SQLDatabase	access:public
start_recording	.\recognize.py	/^    def start_recording(self, channels=default_channels,$/;"	m	class:MicrophoneRecognizer	access:public
stop_recording	.\recognize.py	/^    def stop_recording(self):$/;"	m	class:MicrophoneRecognizer	access:public
subprocess	.\testing.py	/^import subprocess$/;"	i
sys	.\__init__.py	/^                import traceback, sys$/;"	i
time	.\recognize.py	/^import time$/;"	i
traceback	.\__init__.py	/^                import traceback, sys$/;"	i
traceback	.\testing.py	/^import traceback$/;"	i
type	.\database.py	/^    type = None$/;"	v	class:Database
type	.\database_sql.py	/^    type = "mysql"$/;"	v	class:SQLDatabase
